# invader appears, before story
spawn_seljuk_invader_effect = {
	random_county_in_region = {
		region = special_$INVADER_DYNN$_conquest_region_start
		title_province = { save_scope_as = invader_spawn_location }
	}
	if = {
		limit = {
			has_game_rule = default_seljuk_invasion
		}
		hi_determine_county_faiths_in_region_effect = { # saves scope most_popular_region_faith
			FAITH_REGION = special_$INVADER_DYNN$_conquest_region_faith
			FAITH_RESTRICTIONS = "NOT = { has_doctrine_parameter = unreformed }"
			FAITH_POPULARITY = 0 # 0 = 1st, 1 = 2nd, ...
		}
		# prefer Maturidi over Ashari
		if = {
			limit = {
				scope:most_popular_region_faith = { this = faith:ashari }
			}
			faith:maturidi = {
				save_scope_as = most_popular_region_faith
			}
		}
	}
	else = {
		faith:maturidi = {
			save_scope_as = most_popular_region_faith
		}
	}

	### create distant, dead ancestors
	character:1000230102 = { save_scope_as = uechoq_inaltiginid }
	create_character = {
		template = tengiz_inaltiginid_character_template
		father = scope:uechoq_inaltiginid
		dynasty = inherit
		location = scope:invader_spawn_location
		save_scope_as = tengiz_inaltiginid
	}
	create_character = {
		template = qiniq_qiniq_character_template
		father = scope:tengiz_inaltiginid
		dynasty = inherit
		location = scope:invader_spawn_location
		save_scope_as = qiniq_qiniq
	}
	scope:qiniq_qiniq = {
		house = {
			set_house_name = hi_dynn_oghuz_house_qiniq
			set_coa = dynasty_oghuz_house_qinic_coa
		}
	}
	create_character = {
		template = duqaq_qiniq_character_template
		father = scope:qiniq_qiniq
		dynasty = inherit
		location = scope:invader_spawn_location
		save_scope_as = duqaq_qiniq
	}
	create_character = {
		template = seljuk_seljuk_character_template
		father = scope:duqaq_qiniq
		dynasty = inherit
		location = scope:invader_spawn_location
		save_scope_as = seljuk_seljuk
	}
	scope:seljuk_seljuk = {
		house = {
			set_house_name = hi_dynn_oghuz_house_seljuk
			set_coa = title:e_seljuk
		}
	}

	### create living relatives
	# father
	create_character = { # father is created first so we can have him appear as Tughril's father
		template = mikail_seljuk_character_template
		father = scope:seljuk_seljuk
		dynasty = inherit
		faith = scope:most_popular_region_faith
		location = scope:invader_spawn_location
		save_scope_as = mikail_seljuk
	}
	# mother
	create_character = {
		age = { 33 43 }
		template = hi_random_spouse_character_template
		dynasty = none
		opposite_gender = scope:mikail_seljuk
		location = scope:invader_spawn_location
		faith = scope:mikail_seljuk.faith
		culture = scope:mikail_seljuk.culture
		save_scope_as = mikail_seljuk_spouse
		after_creation = {
			marry = scope:mikail_seljuk
		}
	}
	# INVADER
	create_character = {
		template = tughril_seljuk_character_template
		mother = scope:mikail_seljuk_spouse
		father = scope:mikail_seljuk
		dynasty = inherit
		faith = scope:most_popular_region_faith
		location = scope:invader_spawn_location
		save_scope_as = invader
	}
	scope:invader = {
		add_gold = 4500
		add_prestige = 2000
		add_piety = 150
		
		dynasty = {
			add_dynasty_prestige_level = 3
			add_dynasty_prestige = 4000

			$INVADER_DYNN$_add_dynasty_perks_effect = yes
		}
	}

	every_player = {
		trigger_event = $INVADER_DYNN$_invasion.1001 # Notification: Start of invasion
	}
}

seljuk_add_dynasty_perks_effect = {
	add_dynasty_perk = warfare_legacy_1
	add_dynasty_perk = warfare_legacy_2
	add_dynasty_perk = warfare_legacy_3
}

seljuk_maintenance_effect = {
	apply_invader_modifiers_effect = {
		INVADER_DYNN = $INVADER_DYNN$
	}
	give_invader_land_effect = {
		INVADER_DYNN = $INVADER_DYNN$
		INVADER_CHAR = $INVADER_CHAR$
		STARTING_TIER = $STARTING_TIER$
	}
	spawn_$INVADER_DYNN$_family_effect = {
		INVADER_CHAR = $INVADER_CHAR$
	}
	spawn_invader_servants_effect = {
		INVADER_CHAR = $INVADER_CHAR$
	}
	form_the_invader_title_effect = {
		INVADER_DYNN = $INVADER_DYNN$
		INVADER_CHAR = $INVADER_CHAR$
		INVADER_TITLE = $INVADER_TITLE$
		LANDLESS_YES_NO = $LANDLESS_YES_NO$
	}
	seljuk_create_artifacts_effect = yes
}

### populating the life of the invader character
spawn_seljuk_family_effect = {
	# Altun Jan, Tughril's spouse (son = Anushirwan with Shah Malik Yabghu)
	create_character = {
		template = altun_jan_character_template
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		save_scope_as = altun_jan
	}
	scope:altun_jan = {
		marry = $INVADER_CHAR$
		disease_immunity_short_effect = yes
	}

	# Musa (uncle)
	create_character = {
		template = musa_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		father = $INVADER_CHAR$.father.father
		faith = $INVADER_CHAR$.faith
		save_scope_as = musa_seljuk
	}

	# Yunus (uncle)
	create_character = {
		template = yunus_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		father = $INVADER_CHAR$.father.father
		faith = $INVADER_CHAR$.faith
		save_scope_as = yunus_seljuk
	}
	create_character = {
		template = rasultegin_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		father = scope:yunus_seljuk
		faith = $INVADER_CHAR$.faith
		save_scope_as = qutalmish_seljuk
	}

	# Arslan (uncle)
	create_character = {
		template = arslan_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		father = $INVADER_CHAR$.father.father
		faith = $INVADER_CHAR$.faith
		save_scope_as = arslan_seljuk
	}
	create_character = {
		template = qutalmish_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		father = scope:arslan_seljuk
		faith = $INVADER_CHAR$.faith
		save_scope_as = qutalmish_seljuk
	}
	create_character = { # frist sultan of Rûm
		template = suleiman_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		father = scope:qutalmish_seljuk
		faith = $INVADER_CHAR$.faith
		save_scope_as = suleiman_seljuk
		after_creation = {
			set_global_variable = {
				name = historicinvasions_bookmarked_characters_suleiman_seljuk
				value = scope:suleiman_seljuk
			}
		}
	}

	# Mikail (father)
	# created further up so he can be added as a father

	# Chagri-Beg (brother)
	create_character = {
		template = chagri-beg_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		mother = $INVADER_CHAR$.mother
		father = $INVADER_CHAR$.father
		faith = $INVADER_CHAR$.faith
		save_scope_as = chagri-beg_seljuk
	}
	create_character = {
		template = hi_random_spouse_character_template
		dynasty = none
		opposite_gender = scope:chagri-beg_seljuk
		employer = $INVADER_CHAR$
		faith = $INVADER_CHAR$.faith
		culture = $INVADER_CHAR$.culture
		save_scope_as = chagri-beg_seljuk_spouse
		after_creation = {
			marry = scope:chagri-beg_seljuk
		}
	}

	# Qawurd
	create_character = {
		template = qawurd_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		mother = scope:chagri-beg_seljuk_spouse
		father = scope:chagri-beg_seljuk
		faith = $INVADER_CHAR$.faith
	}

	# Uthman
	create_character = {
		template = uthman_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		mother = scope:chagri-beg_seljuk_spouse
		father = scope:chagri-beg_seljuk
		faith = $INVADER_CHAR$.faith
	}

	# Suleyman; NOT RÛM
	create_character = {
		template = suleyman_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		mother = scope:chagri-beg_seljuk_spouse
		father = scope:chagri-beg_seljuk
		faith = $INVADER_CHAR$.faith
	}
	
	# Ilyas
	create_character = {
		template = ilyas_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		mother = scope:chagri-beg_seljuk_spouse
		father = scope:chagri-beg_seljuk
		faith = $INVADER_CHAR$.faith
	}

	# Yaquti
	create_character = {
		template = yaquti_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		mother = scope:chagri-beg_seljuk_spouse
		father = scope:chagri-beg_seljuk
		faith = $INVADER_CHAR$.faith
	}

	# Alp Arslan
	create_character = {
		template = alp_arslan_seljuk_character_template
		dynasty = inherit
		employer = $INVADER_CHAR$
		mother = scope:chagri-beg_seljuk_spouse
		father = scope:chagri-beg_seljuk
		faith = $INVADER_CHAR$.faith
	}
}

# Make sure invader has troops
spawn_seljuk_troops_effect = {
	if = {
		limit = { has_character_flag = is_first_invader_flag }
		spawn_seljuk_army_effect = yes
		spawn_seljuk_army_effect = yes

	}
	spawn_seljuk_army_effect = yes
	spawn_seljuk_army_effect = yes
	spawn_seljuk_army_effect = yes
}
spawn_seljuk_army_effect = {
	spawn_army = {
		name = seljuk_event_troops
		location = capital_province
		uses_supply = no
		inheritable = no
		
		levies = 250
		men_at_arms = {
			type = horse_archers
			stacks = 18
		}
		men_at_arms = {
			type = light_horsemen
			stacks = 16
		}
		men_at_arms = {
			type = light_footmen
			stacks = 5
		}
		men_at_arms = {
			type = bowmen
			stacks = 3
		}
		# siege
		men_at_arms = {
			type = mangonel
			stacks = 7
		}	
	}
}

seljuk_create_artifacts_effect = {
	create_artifact_seljuk_sword_effect = { OWNER = this } # character artifact
}

seljuk_offer_caliph_subjugation_effect = {
	set_global_variable = {
		name = seljuk_offered_caliph_subjugation
		value = yes
	}
	### does a sunni caliph exist? if not, choose or generate a character and make them caliph
	if = { # caliph exists
		limit = { title:d_sunni = { is_title_created = yes } }
		historicinvasions_migration_effect_destroy_other_titles = {
			MIGRATION_LEADER = title:d_sunni.holder
			MIGRATION_TARGET = title:d_sunni # is not destroyed
			MIGRATION_TARGET_TIER = tier_duchy # destroy all higher titles
		}
		historicinvasions_migration_effect_acquire_new_counties = {
			MIGRATION_LEADER = title:d_sunni.holder
			MIGRATION_DYNN = abbasid # used for naming variables
			MIGRATION_REGION = special_seljuk_conquest_region_mesopotamia # acquire ai-controlled counties
			MIGRATION_COUNTY_AMOUNT = 7
		}
		historicinvasions_migration_effect_grant_independence = {
			MIGRATION_LEADER = title:d_sunni.holder
			MIGRATION_REGION = special_seljuk_conquest_region_mesopotamia # grant independence if not within here
			MIGRATION_DYNN = abbasid # just to set a global variable with that dynasty name
		}
	}
	else = { # make a new caliph
		character:34001 = { save_scope_as = abbasid_dynasty_member } # id 3160, hist-id 34001
		scope:abbasid_dynasty_member = {
			dynasty = {
				random_dynasty_member = {
					limit = {
						age > 18
						age < 42
						has_trait = sayyid
						is_ruler = no
						is_healthy = yes
						trigger_if = {
							limit = { has_game_rule = inversed_gender_equality }
							is_female = yes
						}
						trigger_else_if = {
							limit = { has_game_rule = full_gender_equality }
							# Then we don't care about the gender so skip the trigger
						}
						trigger_else = { is_male = yes }
					}
					save_scope_as = new_sunni_caliph
				}
			}
		}
		if = {
			limit = { exists = scope:new_sunni_caliph }
			# do nothing
		}
		else = {
			# fake father
			character:34001 = { save_scope_as = abbasid_dynasty_member } # id 3160, hist-id 34001
			scope:abbasid_dynasty_member = {
				dynasty = {
					random_dynasty_member = {
						limit = { is_male = yes }
						save_scope_as = scripted_father
					}
				}
			}
			# create character
			create_character = {
				template = new_warrior_character
				gender_female_chance = 0
				employer = title:e_seljuk.holder

				dynasty = inherit
				father = scope:scripted_father
				
				faith = faith:ashari
				culture = title:c_baghdad.culture

				save_scope_as = new_sunni_caliph

				after_creation = {
					if = {
						limit = { has_trait = drunkard }
						remove_trait = drunkard
					}
					add_trait = sayyid
				}
			}
		}
		historicinvasions_migration_effect_acquire_new_counties = {
			MIGRATION_LEADER = scope:new_sunni_caliph
			MIGRATION_DYNN = abbasid # used for naming variables
			MIGRATION_REGION = special_seljuk_conquest_region_mesopotamia # acquire ai-controlled counties
			MIGRATION_COUNTY_AMOUNT = 7
		}
		historicinvasions_migration_effect_acquire_title = {
			MIGRATION_LEADER = scope:new_sunni_caliph
			MIGRATION_TARGET = title:d_sunni # acquire title
		}
	}
	if = { # also always try to assign baghdad
		limit = { 
			exists = title:d_sunni.holder
			title:c_baghdad.holder = { is_ai = yes }
			NOT = { title:c_baghdad.holder = title:d_sunni.holder }
		}
		create_title_and_vassal_change = {
			type = revoked
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		title:c_baghdad = {
			change_title_holder = {
				holder = title:d_sunni.holder
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change
	}

	# make vassal of e_seljuk
	if = {
		limit = { exists = title:e_seljuk.holder }
		title:d_sunni.holder = {
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = title_change
				add_claim_on_loss = no
			}
			change_liege = {
				liege = title:e_seljuk.holder
				change = scope:title_change
			}
			resolve_title_and_vassal_change = scope:title_change
		}
	}

	# notify players
	every_player = {
		limit = {
			NOR = {
				this = title:e_seljuk.holder
				this = title:d_sunni.holder
			}
		}
		trigger_event = {
			id = seljuk_invasion.1014
			days = 7
		}
	}
}

seljuk_rum_invasion_effect = {
	### pick a character to lead the invasion. we prefer:
	# the actual Suleiman Seljuk
	# a random Seljuk house member
	# a random Oghuz dynasty member

	if = { # characters were created through seljuk story
		limit = { has_global_variable = historicinvasions_bookmarked_characters_suleiman_seljuk }
		global_var:historicinvasions_bookmarked_characters_suleiman_seljuk = {
			save_scope_as = suleiman_seljuk # so we can scope to the correct house
			save_scope_as = house_seljuk_member # fallback just in case this Suleiman is not suitable
		}
		scope:suleiman_seljuk = {
			# unland him if possible
			if = {
				limit = {
					trigger_if = {
						limit = {
							NOT = { has_government = landless_adventurer_government }
						}
						is_ai = yes # don't run a player into a game over
					}
					is_alive = yes
					highest_held_title_tier > tier_barony
					highest_held_title_tier < tier_kingdom
					is_adult = yes
					is_healthy = yes
					historicinvasions_player_may_become_invader_trigger = yes
					historicinvasions_common_existing_character_restrictions_trigger = yes
				}
				if = {
					limit = { is_independent_ruler = no }
					liege = { save_scope_as = receiver }
				}
				else_if = {
					limit = {
						any_vassal = {
							has_government = clan_government
							count > 0
						}
					}
					random_vassal = {
						limit = {
							has_government = clan_government
						}
						save_scope_as = receiver
					}
				}
				else_if = {
					limit = {
						any_vassal = {
							count > 0
						}
					}
					random_vassal = {
						save_scope_as = receiver
					}
				}
				else = {
					random_neighboring_top_liege_realm_owner = {
						save_scope_as = receiver
					}
				}
				create_title_and_vassal_change = {
					type = granted
					save_scope_as = unlanding_change
					add_claim_on_loss = no
				}
				every_held_title = {
					change_title_holder = {
						holder = scope:receiver
						change = scope:unlanding_change
					}
				}
				resolve_title_and_vassal_change = scope:unlanding_change
			}
			# if the real Suleiman is unlanded & suitable, pick him
			if = {
				limit = {
					is_alive = yes
					OR = {
						is_ruler = no
						highest_held_title_tier = tier_barony
						has_government = landless_adventurer_government
						historicinvasions_player_may_become_invader_trigger = yes
						historicinvasions_common_existing_character_restrictions_trigger = yes
					}
					is_adult = yes
					is_healthy = yes
				}
				save_scope_as = first_rum_ruler
			}
		}
	}
	else = { # characters were NOT created through story
		# scope to correct dynasty
		character:1000230100 = { save_scope_as = oghuz_oghuz }
		# scope to base game Suleiman if possible and assign him to the invasion if he is suitable, otherwise just note him down to scope to his dynasty
		if = {
			limit = { scope:oghuz_oghuz.dynasty = { any_dynasty_member = { has_trait = suleiman_seljuk_trait } } }
			scope:oghuz_oghuz.dynasty = {
				random_dynasty_member = {
					limit = { has_trait = suleiman_seljuk_trait }
					save_scope_as = house_seljuk_member # fallback just in case this Suleiman is not suitable
					save_scope_as = suleiman_seljuk
				}
			}
			scope:suleiman_seljuk = {
				# unland him if possible (unlanded as of v1.13)
				if = {
					limit = {
						trigger_if = {
							limit = {
								NOT = { has_government = landless_adventurer_government }
							}
							is_ai = yes # don't run a player into a game over
						}
						is_alive = yes
						highest_held_title_tier > tier_barony
						highest_held_title_tier < tier_kingdom
						is_adult = yes
						is_healthy = yes
						any_held_title = {
							is_landless_type_title = no
							count > 0
						}
						historicinvasions_player_may_become_invader_trigger = yes
						historicinvasions_common_existing_character_restrictions_trigger = yes
					}
					# pick who will inherit their titles
					if = {
						limit = { is_independent_ruler = no }
						liege = { save_scope_as = receiver }
					}
					else_if = {
						limit = {
							any_vassal = {
								has_government = clan_government
								count > 0
							}
						}
						random_vassal = {
							limit = {
								has_government = clan_government
							}
							save_scope_as = receiver
						}
					}
					else_if = {
						limit = {
							any_vassal = {
								count > 0
							}
						}
						random_vassal = {
							save_scope_as = receiver
						}
					}
					else = {
						random_neighboring_top_liege_realm_owner = {
							save_scope_as = receiver
						}
					}
					# hand over old titles
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = unlanding_change
						add_claim_on_loss = no
					}
					every_held_title = {
						limit = {
							is_landless_type_title = no
						}
						change_title_holder = {
							holder = scope:receiver
							change = scope:unlanding_change
						}
					}
					resolve_title_and_vassal_change = scope:unlanding_change
				}
				# note him down as invader if unlanded
				if = {
					limit = {
						is_alive = yes
						OR = {
							is_ruler = no
							highest_held_title_tier = tier_barony
							has_government = landless_adventurer_government
						}
						is_adult = yes
						is_healthy = yes
						historicinvasions_player_may_become_invader_trigger = yes
						historicinvasions_common_existing_character_restrictions_trigger = yes
					}
					save_scope_as = first_rum_ruler
				}
			}
		}
		# Suleiman is not alive, instead try to scope to his house
		else_if = {
			limit = { game_start_date > 960.1.1 } # birth date of the Seljuk cadet branch founder in the game files
			character:3030 = { save_scope_as = house_seljuk_member }
		}
		# fallback, pick dynasty root
		else = {
			scope:oghuz_oghuz = { save_scope_as = house_seljuk_member }
		}
	}

	# the real Suleiman was NOT found (or he's dead / not suitable), instead pick a suitable house / dynasty member
	if = {
		limit = { NOT = { exists = scope:first_rum_ruler } }
		scope:house_seljuk_member = {
			house = {
				random_house_member = {
					# pick some random suitable house member
					limit = { # thanks Tobbzn (Way of Kings)!
						age > 18
						age < 48
						OR = {
							is_ruler = no
							highest_held_title_tier = tier_barony
							has_government = landless_adventurer_government
						}
						is_adult = yes
						is_healthy = yes
						trigger_if = {
							limit = { has_game_rule = inversed_gender_equality }
							is_female = yes
						}
						trigger_else_if = {
							limit = { has_game_rule = full_gender_equality }
							# Then we don't care about the gender so skip the trigger
						}
						trigger_else = { is_male = yes }
						historicinvasions_player_may_become_invader_trigger = yes
						historicinvasions_common_existing_character_restrictions_trigger = yes
					}
					save_scope_as = first_rum_ruler
				}
			}
		}
	}

	# was a suitable character found? if not -> create from scratch
	if = { # yes
		limit = { exists = scope:first_rum_ruler }
		scope:first_rum_ruler = {
			#set_character_faith_with_conversion = faith:maturidi
			every_child = {
				limit = {
					is_ai = yes
					is_ruler = no
				}
				#set_character_faith_with_conversion = faith:maturidi
			}
		}
	}
	else = { # no
		# first, create a fake father
		scope:house_seljuk_member = {
			house = { # fantasy father
				random_house_member = {
					limit = {
						is_male = yes
						age >= 40
					}
					alternative_limit = {
						is_male = yes
					}
					save_scope_as = scripted_father
				}
				house_head.faith = { save_scope_as = most_popular_region_faith }
			}
		}
		# father fallback
		if = {
			limit = { NOT = { exists = scope:scripted_father } }
			scope:oghuz_oghuz = { save_scope_as = scripted_father }
		}
		# faith fallback
		if = {
			limit = { NOT = { exists = scope:most_popular_region_faith } }
			hi_determine_county_faiths_in_region_effect = { # saves scope most_popular_region_faith
				FAITH_REGION = world_middle_east_persia
				FAITH_RESTRICTIONS = "NOT = { has_doctrine_parameter = unreformed }"
				FAITH_POPULARITY = 0 # 0 = 1st, 1 = 2nd, ...
			}
		}
		# create the invader from scratch
		create_character = {
			age = { 20 24 }
			template = new_warrior_character
			dynasty = inherit
			father = scope:scripted_father
			gender = male
			location = title:c_samosata.title_province

			#faith = faith:maturidi
			faith = scope:most_popular_region_faith
			culture = culture:turkish # oghuz

			save_scope_as = first_rum_ruler
			after_creation = {
				add_gold = 500
				add_prestige = 1250
				add_piety = 150
				add_dread = 25
				if = {
					limit = { has_trait = drunkard }
					remove_trait = drunkard
				}
			}
		}
		# create spouse
		create_character = {
			age = { 20 24 }
			template = hi_random_spouse_character_template
			dynasty = generate
			opposite_gender = scope:first_rum_ruler
			#employer = title:e_seljuk.holder
			location = title:c_samosata.title_province
			faith = faith:tengri_pagan
			culture = scope:first_rum_ruler.culture
			save_scope_as = first_rum_ruler_spouse
			after_creation = {
				disease_immunity_long_effect = yes
				marry = scope:first_rum_ruler
			}
		}
	}

	### create and hand out temporary title; possible characters: not ruler, baron, landless adventurer
	# without DLC EP3 Roads to Power
	if = {
		limit = {
			has_ep3_dlc_trigger = no
		}
		create_dynamic_title = {
			tier = kingdom
			name = seljuk_rum_invasion_title
		}
		create_title_and_vassal_change = {
			type = created
			save_scope_as = change_one
		}
		scope:new_title = {
			change_title_holder = {
				holder = scope:first_rum_ruler
				change = scope:change_one
			}
			set_capital_county = title:c_mayyafariqin
			set_landless_title = yes
			set_delete_on_destroy = yes
			set_no_automatic_claims = yes
			set_can_be_named_after_dynasty = yes
			set_destroy_on_gain_same_tier = yes
			set_destroy_on_succession = yes
	
			save_scope_as = seljuk_rum_invasion_title
			set_variable = seljuk_rum_invasion_title_var
		}
		resolve_title_and_vassal_change = scope:change_one
		scope:new_title = {
			set_coa = title:k_rum
		}
	}
	# with DLC EP3 Roads to Power
	else_if = {
		limit = {
			scope:first_rum_ruler = {
				NOT = {
					#has_government = landless_adventurer_government
					government_has_flag = government_is_landless_adventurer
				}
			}
		}
		scope:first_rum_ruler = {
			dynasty = {
				random_dynasty_member = {
					limit = { NOT = { this = scope:first_rum_ruler } }
					save_scope_as = laamp_inheritor
				}
			}
			if = {
				limit = { NOT = { exists = scope:laamp_inheritor } }
				title:c_samosata.holder = {
					save_scope_as = laamp_inheritor
				}
			}
			create_landless_adventurer_title_effect = {
				REASON = flag:voluntary
				FLAVOR_CHAR = scope:laamp_inheritor
			}
		}
	}
	else = {}
	scope:first_rum_ruler = {
		primary_title = {
			save_scope_as = seljuk_rum_invasion_title
			set_variable = seljuk_rum_invasion_title_var
		}
	}

	scope:first_rum_ruler = {
		disease_immunity_long_effect = yes

		add_character_flag = is_first_rum_ruler
		add_character_modifier = {
			modifier = first_seljuk_rum_modifier
			years = 15
		}
		add_character_modifier = {
			modifier = historicinvasions_plot_armor
			years = 10
		}
		add_character_flag = {
			flag = recent_nation_fracturing_faction_war # makes the AI unlikely to start dissolution factions
			years = 20
		}
		add_character_flag = {
			flag = recent_independence_faction_war # makes the AI unlikely to start independence factions
			years = 20
		}
		if = {
			limit = {
				has_fp1_dlc_trigger = yes
			}
			add_character_modifier = {
				modifier = fp1_reprieve_from_sa_modifier
				years = 5
			}
		}

		add_gold = 750
		add_prestige = 1250
		add_piety = 250
		add_dread = 25
		add_trait = organizer
		add_perk = stalwart_leader_perk

		# block from inheritance for the duration of the war
		if = {
			limit = {
				father = { is_ai = yes }
			}
			add_trait = disinherited
			add_character_flag = temporarily_disinherited
			trigger_event = {
				id = seljuk_invasion.1016
				years = 5
			}
		}
		
		# start invasion
		#todo check that Persia isn't already holding all of Anatolia? make emperor establish Rûm without war?
		unlanded_war_target_evaluation_and_declaration_effect = {
			INVADER_DYNN = seljuk
			INVADER_REGION = 7
			EVERY_RANDOM = every # declare on just one ruler / title (random) or on a large area (every)?
			INVADER_TARGET_TITLE_TIER = duchy # currently only to choose target lieges
			#INVADER_TITLE_TARGETS = "target_title = title:d_chaldia target_title = title:d_armeniac target_title = title:d_paphlagonia target_title = title:d_sebasteia target_title = title:d_cilicia target_title = title:d_charsianon target_title = title:d_cappadocia target_title = title:d_anatolia target_title = title:d_cibyrrhaeot target_title = title:d_bucellaria target_title = title:d_optimatoi target_title = title:d_opsikion target_title = title:d_thracesia target_title = title:d_ephese"
			#INVADER_TITLE_TARGETS = "target_title = title:d_chaldia.de_jure_liege target_title = title:d_armeniac.de_jure_liege target_title = title:d_paphlagonia.de_jure_liege target_title = title:d_sebasteia.de_jure_liege target_title = title:d_cilicia.de_jure_liege target_title = title:d_charsianon.de_jure_liege target_title = title:d_cappadocia.de_jure_liege target_title = title:d_anatolia.de_jure_liege target_title = title:d_cibyrrhaeot.de_jure_liege target_title = title:d_bucellaria.de_jure_liege target_title = title:d_optimatoi.de_jure_liege target_title = title:d_opsikion.de_jure_liege target_title = title:d_thracesia.de_jure_liege target_title = title:d_ephese.de_jure_liege"
			INVADER_TITLE_TARGETS = "target_title = title:d_chaldia.de_jure_liege target_title = title:d_armeniac.de_jure_liege target_title = title:d_sebasteia.de_jure_liege target_title = title:d_cilicia.de_jure_liege target_title = title:d_charsianon.de_jure_liege target_title = title:d_cappadocia.de_jure_liege target_title = title:d_anatolia.de_jure_liege target_title = title:d_cibyrrhaeot.de_jure_liege" # no nikaea
			INVADER_LIEGE_RESTRICTIONS = "NOR = { this = title:e_seljuk.holder this = title:e_persia.holder }"
		}
		# and randomly call small house members into war against Byzantium
		seljuk_rum_call_to_arms_effect = yes
	}
}

# Make sure invader has troops
spawn_seljuk_rum_troops_effect = {
	if = {
		limit = { has_character_flag = is_first_invader_flag }
		spawn_seljuk_rum_army_effect = yes
	}
	spawn_seljuk_rum_army_effect = yes
	spawn_seljuk_rum_army_effect = yes
	spawn_seljuk_rum_army_effect = yes
	if = {
		limit = { game_start_date < 1000.1.1 }
		spawn_seljuk_rum_army_effect = yes
		spawn_seljuk_rum_army_effect = yes
		spawn_seljuk_rum_army_effect = yes
	}
}
spawn_seljuk_rum_army_effect = {
	spawn_army = {
		name = seljuk_rum_event_troops
		location = primary_title.title_capital_county.title_province
		war = scope:war
		war_keep_on_attacker_victory = no
		uses_supply = no
		inheritable = no
		
		levies = 50
		men_at_arms = {
			type = horse_archers
			stacks = 8
		}
		men_at_arms = {
			type = light_horsemen
			stacks = 8
		}
		men_at_arms = {
			type = armored_horsemen
			stacks = 4
		}
		men_at_arms = {
			type = light_footmen
			stacks = 4
		}
		# siege
		men_at_arms = {
			type = mangonel
			stacks = 7
		}
	}
}

seljuk_rum_call_to_arms_effect = {
	# scope to invasion of Anatolia war
	random_character_war = {
		limit = {
			using_cb = historicinvasions_landless_invasion_war
			primary_attacker = {
				this = scope:first_rum_ruler
				primary_title = {
					has_variable = seljuk_rum_invasion_title_var
					is_landless_type_title = yes
				}
			}
			primary_defender = title:e_byzantium.holder
		}
		save_scope_as = rum_byzantium_war
	}

	# random house members
	scope:first_rum_ruler.house = {
		ordered_house_member = {
			order_by = current_military_strength
			
			limit = {
				is_landed = yes
				OR = {
					highest_held_title_tier = tier_duchy
					highest_held_title_tier = tier_county
				}
				religion = religion:islam_religion
				sub_realm_size >= 3
				sub_realm_size <= 12
				is_available_healthy_adult = yes
				is_at_war = no
				is_ai = yes
				NOR = {
					this = scope:first_rum_ruler
					is_vassal_or_below_of = scope:first_rum_ruler
					this = title:e_byzantium.holder
					is_vassal_or_below_of = title:e_byzantium.holder
					is_allied_to = title:e_byzantium.holder
					has_truce = title:e_byzantium.holder
				}
			}
			max = 6
			check_range_bounds = no

			add_to_list = rum_byzantium_war_attackers
		}
	}

	# add in as attackers
	every_in_list = {
		list = rum_byzantium_war_attackers
		scope:rum_byzantium_war = { add_attacker = prev }
	}
}

seljuk_form_rum_effect = {
	# block decision
	add_to_global_variable_list = {
		name = unavailable_unique_decisions
		target = flag:flag_formed_rum_sultanate
	}
	set_global_variable = {
		name = flag_formed_rum_sultanate
		value = scope:first_rum_ruler
	}
	### de jure changes
	# rûm
	title:d_anatolia = { add_to_temporary_list = hi_form_k_rum }
	title:d_cappadocia = { add_to_temporary_list = hi_form_k_rum }
	title:d_charsianon = { add_to_temporary_list = hi_form_k_rum }
	title:d_sebasteia = { add_to_temporary_list = hi_form_k_rum }
	every_in_list = {
		list = hi_form_k_rum
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_duchy }
			set_de_jure_liege_title = title:k_rum
		}
	}
	title:k_rum = {
		set_capital_county = title:c_charsianon
	}
	# pontus
	title:k_pontus = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_duchy }
			set_de_jure_liege_title = title:k_trebizond
		}
	}
	title:d_paphlagonia = { set_de_jure_liege_title = title:d_bucellaria.de_jure_liege }
	if = {
		limit = { exists = title:k_pontus.holder }
		# grant replacement kingdom
		create_title_and_vassal_change = {
			type = created
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		title:k_trebizond = {
			change_title_holder = {
				holder = title:k_pontus.holder
				change = scope:title_change
			}
			copy_title_history = title:k_pontus
		}
		resolve_title_and_vassal_change = scope:title_change
		# destroy pontus
		title:k_pontus.holder = {
			set_primary_title_to = title:k_trebizond
			destroy_title = title:k_pontus
		}
	}

	# give out counties, if demesne too small
	if = {
		limit = { scope:first_rum_ruler = { domain_size < 3 } }
		set_local_variable = {
			name = seljuk_rum_max_start_counties_var
			value = 0
		}
		while = {
			limit = {
				local_var:seljuk_rum_max_start_counties_var < 3
			}
			random_county_in_region = {
				region = special_seljuk_rum_conquest_region_de_jure
				limit = {
					holder = { is_ai = yes }
					NOT = { is_in_list = seljuk_rum_starting_counties_list }
				}
				county = { add_to_temporary_list = seljuk_rum_starting_counties_list }
			}
			change_local_variable = {
				name = seljuk_rum_max_start_counties_var
				add = 1
			}
		}
	}

	# Create the title
	create_title_and_vassal_change = {
		type = created
		save_scope_as = title_change_two
		add_claim_on_loss = no
	}
	title:k_rum = {
		change_title_holder = {
			holder = scope:first_rum_ruler
			change = scope:title_change_two
		}
		apply_temporary_historicinvasions_dissolution_protection_effect = yes
	}
	resolve_title_and_vassal_change = scope:title_change_two

	scope:first_rum_ruler = {
		set_primary_title_to = title:k_rum
		if = {
			limit = {
				has_trait = disinherited
				has_character_flag = temporarily_disinherited
			}
			remove_trait = disinherited
			remove_character_flag = temporarily_disinherited
		}
		# government; without this, Rûm would spawn as an administrative realm
		if = {
			limit = {
				OR = {
					religion = religion:islam_religion
					faith = { has_doctrine = tenet_islamic_syncretism }
				}
			}
			change_government = clan_government 
		}
		else_if = {
			limit = {
				faith = { has_doctrine_parameter = unreformed }
			}
			change_government = tribal_government
		}
		else = {
			change_government = feudal_government
		}
	}

	### culture changes within Rûm; a later event will present the option to switch over to Turkmen culture
	title:k_rum.title_capital_county.duchy = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_county_culture = scope:first_rum_ruler.culture
			set_county_faith = scope:first_rum_ruler.faith
		}
	}
	title:k_rum.holder = {
		every_sub_realm_county = {
			limit = {
				tier = tier_county
				NOR = {
					culture = { has_cultural_pillar = heritage_turkic }
					culture = { has_cultural_pillar = language_turkic }
				}
				kingdom = title:k_rum # county -> duchy -> kingdom of Rûm
			}
			random = {
				chance = {
					value = 80
					subtract = development_level
					subtract = development_level
					subtract = development_level
					max = 100
					min = 0
				}
				set_county_culture = scope:first_rum_ruler.culture
				set_county_faith = scope:first_rum_ruler.faith
			}
		}
	}

	### create some interesting realms in Anatolia
	# release Cilicia
	# Rouben Roubenid
	if = {
		limit = {
			title:d_cilicia = { is_title_created = yes }
			title:d_cilicia.holder = {
				sub_realm_size <= 5
				highest_held_title_tier = tier_duchy
			}
			OR = {
				title:d_cilicia.holder.top_liege = scope:first_rum_ruler
				title:d_cilicia.holder.top_liege = title:b_constantinople.holder.top_liege
			}
		}
		# note down all counties
		title:d_cilicia = {
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_county }
				add_to_list = d_cilicia_counties_list
			}
		}
		# if the holder is an AI, grant all titles to Rouben
		if = {
			limit = {
				title:d_cilicia.holder = {
					is_ai = yes
				}
			}
			# pick character
			if = {
				limit = {
					game_start_date >= 1038.1.1 # make sure he is old enough, *1020
					exists = character:232561
					character:232561 = {
						is_alive = yes
						OR = {
							is_ruler = no
							highest_held_title_tier = tier_barony
						}
						is_healthy = yes
						culture = culture:armenian
						faith = faith:armenian_apostolic
					}
				}
				character:232561 = { save_scope_as = rouben_roubenid }
			}
			else = { # spawn in a new Rouben
				create_character = {
					template = rouben_roubenid_character_template
					dynasty = generate
					location = title:c_cilicia.title_province
					save_scope_as = rouben_roubenid
					after_creation = {
						disease_immunity_long_effect = yes
						dynasty = {
							set_dynasty_name = hi_dynn_roubenid
						}
						house = {
							set_house_name = hi_dynn_roubenid
						}
					}
				}
			}
			# transfer title and vassals
			create_title_and_vassal_change = {
				type = faction_demand
				save_scope_as = change
				add_claim_on_loss = yes
			}
			title:d_cilicia.holder = {
				every_held_title = {
					limit = { NOT = { tier = tier_barony } }
					change_title_holder_include_vassals = {
						holder = scope:rouben_roubenid
						change = scope:change
					}
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
		# take entire duchy
		create_title_and_vassal_change = {
			type = faction_demand
			save_scope_as = change
			add_claim_on_loss = no
		}
		every_in_list = {
			list = d_cilicia_counties_list
			limit = {
				NOT = {
					this = title:k_rum.holder.capital_county
				}
			}
			change_title_holder = {
				holder = scope:rouben_roubenid
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
		# make independent
		title:d_cilicia.holder = {
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = no
			}
			becomes_independent = { change = scope:change }
			resolve_title_and_vassal_change = scope:change
			# prevent diplomatic vassalization
			add_opinion = {
				modifier = hate_opinion
				target = title:b_constantinople.holder.top_liege
				opinion = -200
			}
			# family
			trigger_event = game_rule.1001
		}
	}
	# release Antioch
	if = {
		limit = {
			title:d_antioch = { is_title_created = yes }
			title:d_antioch.holder = {
				sub_realm_size <= 5
				highest_held_title_tier = tier_duchy
			}
			OR = {
				title:d_antioch.holder.top_liege = scope:first_rum_ruler
				title:d_antioch.holder.top_liege = title:b_constantinople.holder.top_liege
			}
		}
		# make independent
		title:d_antioch.holder = {
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = no
			}
			becomes_independent = { change = scope:change }
			resolve_title_and_vassal_change = scope:change
		}
	}
	# release Edessa
	if = {
		limit = {
			title:d_edessa = { is_title_created = yes }
			title:d_edessa.holder = {
				sub_realm_size <= 5
				highest_held_title_tier = tier_duchy
			}
			OR = {
				title:d_edessa.holder.top_liege = scope:first_rum_ruler
				title:d_edessa.holder.top_liege = title:b_constantinople.holder.top_liege
			}
		}
		# make independent
		title:d_edessa.holder = {
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = no
			}
			becomes_independent = { change = scope:change }
			resolve_title_and_vassal_change = scope:change
		}
	}
	# Roussel de Bailleul
	if = {
		limit = {
			title:c_galatia.holder = {
				is_ai = yes
			}
		}
		# pick character
		if = { # existing Roussel
			limit = {
				game_start_date >= 1050.1.1 # make sure he is old enough, *1032
				exists = character:34220
				character:34220 = {
					is_alive = yes
					OR = {
						is_ruler = no
						highest_held_title_tier = tier_barony
					}
					is_healthy = yes
					culture = culture:norman
					faith = faith:catholic
				}
			}
			character:34220 = { save_scope_as = roussel_bailleul }
		}
		else = { # spawn in a new Roussel
			create_character = {
				template = roussel_bailleul_character_template
				dynasty = generate
				location = title:c_galatia.title_province
				save_scope_as = roussel_bailleul
				after_creation = {
					disease_immunity_long_effect = yes
					dynasty = {
						set_dynasty_name = hi_dynn_bailleul
					}
					house = {
						set_house_name = hi_dynn_bailleul
					}
				}
			}
		}
		# give title & other things
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = no
		}
		title:c_galatia = {
			change_title_holder = {
				holder = scope:roussel_bailleul
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
		# make independent
		scope:roussel_bailleul = {
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = no
			}
			becomes_independent = { change = scope:change }
			resolve_title_and_vassal_change = scope:change
			# prevent diplomatic vassalization
			add_opinion = {
				modifier = hate_opinion
				target = title:b_constantinople.holder.top_liege
				opinion = -200
			}
			# family
			trigger_event = game_rule.1001
		}
	}

	# spawn army for the Byzantine Empire
	if = {
		limit = { exists = title:e_byzantium.holder }
		title:e_byzantium.holder = {
			spawn_army = {
				name = event_troop_default_name
				location = capital_province
				uses_supply = yes
				inheritable = no
				
				levies = 100
				men_at_arms = {
					type = cataphract
					stacks = 2
				}
				men_at_arms = {
					type = pikemen_unit
					stacks = 3
				}
				men_at_arms = {
					type = light_horsemen
					stacks = 3
				}
			}
		}
	}

	# spawn army for Rûm
	scope:first_rum_ruler = {
		spawn_army = {
			name = seljuk_rum_event_troops
			location = primary_title.title_capital_county.title_province
			uses_supply = no
			inheritable = yes
			
			levies = 1060
			men_at_arms = {
				type = horse_archers
				stacks = 8
			}
			men_at_arms = {
				type = light_horsemen
				stacks = 6
			}
			men_at_arms = {
				type = armored_horsemen
				stacks = 2
			}
			# siege
			men_at_arms = {
				type = mangonel
				stacks = 4
			}
		}
	}

	# family
	scope:first_rum_ruler = {
		# potentially generate family
		trigger_event = game_rule.1001
		if = {
			limit = { is_married = no }
			# create spouse
			create_character = {
				age = { 20 24 }
				template = hi_random_spouse_character_template
				#dynasty_house = house:house_inaltiginid
				dynasty = generate
				gender = female
				employer = scope:first_rum_ruler
				faith = faith:tengri_pagan
				culture = scope:first_rum_ruler.culture
				save_scope_as = first_rum_ruler_spouse
				after_creation = {
					disease_immunity_long_effect = yes
					marry = scope:first_rum_ruler
					set_relation_lover = scope:first_rum_ruler
				}
			}
		}
	}

	# notify players
	every_player = {
		limit = {
			NOR = {
				#this = title:e_seljuk.holder
				this = title:k_rum.holder
			}
		}
		trigger_event = {
			id = seljuk_invasion.1015
			days = 7
		}
	}

	# follow-up events
	scope:first_rum_ruler = {
		# legend seed
		trigger_event = {
			id = seljuk_invasion.1017
			days = 1
		}
		# adopt Turkmen culture
		trigger_event = {
			id = seljuk_invasion.0020
			months = 1
		}
	}
}