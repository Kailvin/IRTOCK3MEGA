# Story for eldiguzid dynasty
# originally made by Petter Vilberg
# adjusted by me

story_eldiguzid_invasion = {
	on_setup = {
		historicinvasions_story_setup_effect = { # global start variable, story variables, conditional dissolution protection
			INVADER_DYNN = eldiguzid # for story start global variable
			INVADER_TITLE = title:k_eldiguzid # title the invader spawns with
		}
		# make sure that the title is destroyed on succession if the heir already holds a different kingdom
		#^is set on story end
		story_owner = {
			# local empire does exist - become a unlanded & attacking nomad
			if = {
				limit = { has_character_flag = nomad_invader }
				apply_invader_modifiers_effect = {
					INVADER_DYNN = eldiguzid
				}
				form_the_invader_title_effect = {
					INVADER_DYNN = eldiguzid
					INVADER_CHAR = scope:story.story_owner
					INVADER_TITLE = scope:story.var:invader_title_var
					LANDLESS_YES_NO = yes
				}
				unlanded_war_target_evaluation_and_declaration_effect = {
					INVADER_DYNN = eldiguzid
					INVADER_REGION = start
					EVERY_RANDOM = random # declare on just one ruler / title (random) or on a large area (every)?
					INVADER_TARGET_TITLE_TIER = duchy # currently only to choose target lieges
					INVADER_TITLE_TARGETS = "target_title = scope:random_start_invasion_target_title"
					INVADER_LIEGE_RESTRICTIONS = ""
				}
			}
			# local empire doesn't exist - spawn as landed invader
			else = {
				save_scope_as = invader
				every_player = {
					trigger_event = eldiguzid_invasion.1001 # Notification: Start of invasion
				}
				eldiguzid_maintenance_effect = {
					INVADER_DYNN = eldiguzid
					INVADER_CHAR = scope:story.story_owner
					INVADER_TITLE = scope:story.var:invader_title_var
					LANDLESS_YES_NO = no
					STARTING_TIER = duchy
				}
				trigger_event = {
					id = eldiguzid_invasion.0200
					months = 1
				}
			}
		}
	}

	on_end = {
		invader_story_on_end_effect = { INVADER_DYNN = eldiguzid }

		# set de jure liege and make sure that the title is destroyed on succession if the heir alredy holds a different kingdom
		title:k_eldiguzid = { set_variable = set_destroy_on_gain_same_tier_var }

		# clean up: landless-type title is reverted and title is destroyed if ruler is still landless
		if = {
			limit = { scope:story.var:invader_title_var = { is_landless_type_title = yes } }
			scope:story.var:invader_title_var = { set_landless_title = no }
			if = {
				limit = {
					scope:story.var:invader_title_var = { is_title_created = yes }
					scope:story.var:invader_title_var.holder = { is_landless_ruler = yes } # holds any title, but no on-map land
				}
				scope:story.var:invader_title_var.holder = { destroy_title = scope:story.var:invader_title_var }
			}
		}
		
		destroy_titular_invader_title_effect = yes
	}

	on_owner_death = {
		# random chance to set variable to end story after ruler N dies, depending on how many story owners there have been in total
		random = {
			chance = 0
			modifier = {
				add = 0
				var:story_owner_counter >= 1 # end story after death of ruler N?
			}
			modifier = {
				add = 80
				var:story_owner_counter >= 2
			}
			modifier = {
				add = 20
				var:story_owner_counter >= 3
			}
			modifier = {
				add = 100
				scope:story.var:invader_title_var = { is_landless_type_title = yes }
				scope:story.var:invader_title_var.holder = {
					is_landless_ruler = yes # holds any title, but no on-map land
					is_at_war = no # perhaps the initial landess war is still ongoing
				}
			}
			set_variable = {
				name = end_of_invasion_story
				value = yes
			}
		}
		invader_story_on_death_effect = { INVADER_DYNN = eldiguzid }
	}

	# maintenance
	effect_group = {
		days = historicinvasions_story_maintenance_value

		trigger = { always = yes }

		# make sure they have money on hand
		triggered_effect = {
			trigger = { story_owner = { gold < 0 } }
			effect = { story_owner = { add_gold = 300 } }
		}

		# end the story prematurely; anushtiginid
		triggered_effect = {
			trigger = {
				NOT = { has_game_rule = never_anushtiginid_invasion }
				is_target_in_global_variable_list = {
					name = historicinvasions_story_started
					target = flag:anushtiginid_story_started
				}
			}
			effect = {
				debug_log = "ending eldiguzid story because the anushtiginids have appeared"
				end_story = yes
			}
		}

		# end the story prematurely; mongols
		triggered_effect = {
			trigger = {
				has_global_variable = mongols_have_appeared
				is_target_in_global_variable_list = {
					name = historicinvasions_story_started
					target = flag:borjigin_story_started
				}
			}
			effect = {
				debug_log = "ending eldiguzid story because the mongols have appeared"
				end_story = yes
			}
		}

		# end the story prematurely, because their conquests have been completed
		triggered_effect = {
			trigger = {
				story_owner = { completely_controls_region = special_eldiguzid_conquest_region_total }
			}
			effect = {
				debug_log = "ending eldiguzid story because the conquest goal has been completed"
				end_story = yes
			}
		}

		# end the story prematurely, because the invader has lost their #th offensive war
		triggered_effect = {
			trigger = {
				NOT = { has_game_rule = historicinvasions_invasion_ends_after_defeat_disabled }
			}
			effect = {
				historicinvasions_invasion_ends_after_defeat_effect = yes
			}
		}
	}

	#Start a new war if none is ongoing
	effect_group = {
		days = { 300 600 }

		trigger = { story_owner = { is_ai = yes } }

		first_valid = {
			triggered_effect = {
				trigger = {
					story_owner = { has_character_flag = invasion_ends_after_player_win }
				}
				effect = {
					debug_log = "ending eldiguzid story because a player was able to defend against the invader"
					end_story = yes
				}
			}
			triggered_effect = {
				trigger = { story_owner = { should_invader_declare_war_trigger = { INVADER_TITLE = scope:story.var:invader_title_var } } }
				effect = {
					story_owner = {
						war_target_evaluation_and_declaration_effect = {
							INVADER_DYNN = eldiguzid
							INVADER_CHAR = scope:story.story_owner
							INVADER_REGION = total
							INVADER_TARGET_TITLE_TIER = kingdom
							INVADER_RANGE = neighboring
							INVADER_LIEGE_RESTRICTIONS = ""
						}
					}
				}
			}
		}
	}

	# Story handling in case of succession weirdness
	effect_group = {
		days = historicinvasions_succession_weirdness_value

		trigger = { NOT = { story_owner = { has_title = scope:story.var:invader_title_var } } }

		# either transfer story ownership or end story if the title is not created
		triggered_effect = {
			trigger = { always = yes }
			effect = {
				hi_check_for_valid_story_owner_effect = {
					INVADER_TITLE = scope:story.var:invader_title_var
					STORY_COUNTER_INCREASE = 0
				}
			}
		}
	}

	# notification event & family spawning
	effect_group = {
		days = 120
		trigger = {
			scope:story.var:invader_title_var = { is_landless_type_title = yes }
			scope:story.var:invader_title_var.holder = { is_landless_ruler = no }
		}
		triggered_effect = {
			trigger = {
				always = yes
			}
			effect = {
				scope:story.var:invader_title_var = { set_landless_title = no }
				story_owner = {
					spawn_eldiguzid_family_effect = {
						INVADER_CHAR = scope:story.story_owner
					}
					spawn_invader_servants_effect = {
						INVADER_CHAR = scope:story.story_owner
					}
					save_scope_as = invader
				}
				every_player = {
					trigger_event = eldiguzid_invasion.1001 # Notification: Start of invasion
				}
			}
		}
	}
}